extends ./layouts/default

include Views/mixins/code

append variables
  - title = 'Responsive image'

block header
  -
    // To extract a single property from result of `responsive-loader`
    // use the `prop=PROPERTY_NAME` query parameter (feature of pug-plugin)

    const getImage = (file, size) => require(`${file}?size=${size}`);

    const responsiveImage = {
      // use default image size
      src: require('Images/abstract.webp'),
      srcSet: require('Images/abstract.webp?sizes[]=480,sizes[]=640,sizes[]=800,sizes[]=1024,sizes[]=1450,sizes[]=1920&format=png'),
      placeholder: require('Images/abstract.webp?prop=placeholder&placeholder=true&placeholderSize=100')
    }

  .header-container
    .header-content
      h1.text Responsive image
    img(srcset=responsiveImage.srcSet src=responsiveImage.src alt="responsive image")

block body
  section
    h1 How to use responsive images with Pug
    p.
      For responsive images is recommended to use the #[a(href="https://github.com/dazuaz/responsive-loader") responsive-loader].
      This is a very fast, high-quality and powerful module.

    h3 Setup

    p.
      Firstly, install and configure the #[a(href="https://github.com/webdiscus/pug-plugin#install") pug-plugin],
      then install modules:
    +code: :highlight()
      npm install responsive-loader sharp --save-dev

    p Add to Webpack module rules the following configuration:
    +code: :highlight(js)
      {
        test: /\.(gif|png|jpe?g|svg|webp)$/i,
        type: 'asset/resource',
        use: {
          loader: 'responsive-loader',
          options: {
            // output filename of images
            name: 'assets/img/[name].[hash:8]-[width]w.[ext]',
          },
        },
      },

    b Note:
    ul
      li the type must be defined as #[:code asset/resource]
      li in responsible-loader version >= 3.0.4 the default adapter is #[:code sharp]
      li define in the #[:code name] option both public path and output filename

  section
    h3 Usage of image with fixed size

    p Defaults, an image without queries will stay in its original size and format.

    p To resize an single image use the #[:code size] query parameter:

    +code: :highlight(pug)
      img(src='./image.jpg?size=200')

    p To convert an image in other format, e.g. #[:code webp], use the #[:code format] query parameter:
    +code: :highlight(pug)
      img(src='./image.jpg?size=200&format=webp')

    p Usage of the image in SCSS as the background-image:
    +code: :highlight(scss)
      .image {
        background-image: url('./image.jpg?size=200');
      }

    h3 Examples

    table.image-preview
      tr
        td: img(src='Images/image.webp?size=100' alt="fix image")
        td: +code: :highlight(pug) img(src='./image.webp?size=100')
      tr
        td: img(src='Images/image.webp?size=120&format=png' alt="fix image")
        td: +code: :highlight(pug) img(src='./image.webp?size=120&format=png')
      tr
        td: img(src='Images/image.webp?size=140&format=jpg' alt="fix image")
        td: +code: :highlight(pug) img(src='./image.webp?size=140&format=jpg')

      tr
        //- see the styles for this demo in `main.scss`
        td: .demo-image
        td
          +code: :highlight(scss)
            // scss
            $width: 200;
            $height: 145;
            .demo-image {
              width: #{$width}px;
              height: #{$height}px;
              background-image: url('./image.jpg?size=#{$width}');
            }

    h3 Usage of responsive image
    p.
      For a responsive image use the #[:code sizes&lbrack;&rbrack;] query parameter.<br>
      For the readability of your code, define the image object in a JS context, like so:
    +code: :highlight(pug)
      -
        const responsiveImage = {
          // default image
          src: require('./image.jpg?size=640'),
          // responsive images
          srcSet: require('./image.jpg?sizes[]=480,sizes[]=640,sizes[]=800,sizes[]=1024,sizes[]=1450,sizes[]=1920'),
        }

    p.
     #[b Note:] the #[:code require('./image.jpg?sizes&lbrack;&rbrack;=480,sizes&lbrack;&rbrack;=640,...')]
     in Pug returns directly a string with a comma-separated list of images.

    p Then set the #[:code srcset] and #[:code src] image attributes:
    +code: :highlight(pug)
      img(src=responsiveImage.src srcset=responsiveImage.srcSet alt="responsive image")

    p Generated HTML of responsive image:
    +code: :highlight(html)
      <img src="/assets/images/image.af5d288cf6d0be8269fb6785de4dca47-640w.jpg.jpg"
        srcset="/assets/images/image.c89a9aadd767f562f8cea83cf8d31b90-480w.jpg 480w,
          /assets/images/image.af5d288cf6d0be8269fb6785de4dca47-640w.jpg 640w,
          /assets/images/image.39668d49ebd9fba351e0df395b762f30-800w.jpg 800w,
          /assets/images/image.1b62e4707c5462a41627051bc4b26d54-1024w.jpg 1024w,
          /assets/images/image.1c1d5de33673303eacdfa27b9b7b6e00-1450w.jpg 1450w,
          /assets/images/image.c62bf05c4abc346d0239e964ab096228-1920w.jpg 1920w">


    h3 Usage of responsive image with placeholder

    p.
      When the connection speed is low, the background is blank while loading a full size image.
      In this case, we can show a very small version of the image as #[:code background-image] before the original image is fully loaded.
      The original image must be wrapped in a div container with an inline background image - placeholder.

    div.
      To generate a placeholder as inline data URL use the following query parameters:
    ul
      li #[:code prop=placeholder] extract the placeholder from a result object (feature of pug-plugin)
      li #[:code placeholder=true] enable generating of the image as data URL
      li #[:code placeholderSize=100] the width of the placeholder image in px, default is 40px
      li.
        #[:code emitFile=false] disable writing the original image file to the output directory,
        because we only need the generated string of the data URL

    p.
      For example we have an header with responsive image. The image has the width 100% and fixed height 300px.

    div Using the object #[:code responsiveImage] (see above) write in Pug:
    +code: :highlight(pug)
      .box: img(src=responsiveImage.src srcset=responsiveImage.srcSet alt="responsive image")

    div SCSS:
    +code: :highlight(scss)
      $imgHeight: 300px; // fixed height of the image in header

      .box {
        width: 100%;
        height: $imgHeight;
        max-height: $imgHeight;
        overflow: hidden;
        background-size: cover; // fit image with aspect ratio in the content box

        // placeholder of responsive image as inline data URL
        background-image: url('./image.jpg?prop=placeholder&placeholder=true&placeholderSize=100');

        // responsive image
        img {
          width: 100%;
          height: 100%;
          object-fit: cover; // fit image with aspect ratio in the content box
        }
      }
    div The result of the responsive image you can see in the header of this site.

    p
    div Other way to set the placeholder is to use it in the style property as the #[:code background-image: url(...)].
    +code: :highlight(js)
      - const placeholder = require('./image.jpg?prop=placeholder&emitFile=false&placeholder=true&placeholderSize=35')
      - const width = 200
      - const height = require("./image.jpg?prop=height&emitFile=false&size=" + width)
      .box(style=`background-image: url(${placeholder}); width:${width}px; height:${height}px; background-size:cover;`)

    div #[b Note:] Don't use require() directly in the style property, the image file will not be resolved.

    p
    div The generated HTML:
    +code: :highlight(html)
      <div class="box"
           style="background-image: url(data:image/jpeg;base64,...); width:200px; height:110px; background-size:cover;">

    p
    div What you see in the browser:
    - const placeholder = require("Images/image.webp?prop=placeholder&emitFile=false&placeholder=true&placeholderSize=50")
    - const width = 200
    - const height = require("Images/image.webp?prop=height&emitFile=false&size=" + width)
    .box(style=`background-image: url(${placeholder}); width:${width}px; height:${height}px; background-size:cover;`)

    h3 Extract property
    div.
      To extract any single property from the #[:code responsible-loader] processing result, use the #[:code prop=PROP_NAME] query parameter.<br>
      Supported properties: #[:code srcSet] #[:code src] #[:code width] #[:code height] and #[:code placeholder].<br>
      For example:

    +code: :highlight(js)
      p srcSet: #{require("./image.jpg?prop=srcSet&format=webp&sizes[]=100,sizes[]=200,sizes[]=300")}
      p src webp: #{require("./image.jpg?prop=src&format=webp&size=200")}
      p placeholder: #{require("./image.jpg?prop=placeholder&emitFile=false&placeholder=true&placeholderSize=50")}
      p width of original image size: #{require("./image.jpg?prop=width&emitFile=false")}
      p height of resised image: #{require("./image.jpg?prop=height&size=200")}

    h3 Notes

    ul
      li
        div To resolve a source image file in the #[:code src] attribute of the #[:code img] tag is not need to use the #[:code require()] function:
        +code: :highlight(pug)
          img(src='./image.jpg?size=200')

      li
        div Use the #[:code require()] function only to resolve a source file in a Pug code or in text:
        +code: :highlight(pug)
          - const imageSrc = require('./image.jpg?size=640')
          img(src=imageSrc)
